# ==============================================================================
# Functions using the Doxygen doc standard.
# ==============================================================================
Given python(function without parameters without return type where b:doge_doc_standard='doxygen'):
  def myFunc():
    pass

Do (trigger doge):
  :let b:doge_doc_standard='doxygen'\<CR>
  \<C-d>

Expect python (generated comment with nothing but the text 'TODO'):
  def myFunc():
    """! @brief [TODO:description]"""
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters without type hints without return type where b:doge_doc_standard='doxygen'):
  def myFunc(p1, p2, p3 = ''):
    pass

Do (trigger doge):
  :let b:doge_doc_standard='doxygen'\<CR>
  \<C-d>

Expect python (generated comment without type hints with defaults and optional):
  def myFunc(p1, p2, p3 = ''):
    """!
    @brief [TODO:description]

    @param p1 [TODO:description]
    @param p2 [TODO:description]
    @param p3 [TODO:description]
    """
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters with type hints without return type where b:doge_doc_standard='doxygen'):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []):
    pass

Do (trigger doge):
  :let b:doge_doc_standard='doxygen'\<CR>
  \<C-d>

Expect python (generated comment with type hints, defaults and optional):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []):
    """!
    @brief [TODO:description]

    @param p1 [TODO:description]
    @param p2 [TODO:description]
    @param p3 [TODO:description]
    """
    pass

# ------------------------------------------------------------------------------

Given python(function with parameters with type hints with return type where b:doge_doc_standard='doxygen'):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []) -> Sequence[T]:
    pass

Do (trigger doge):
  :let b:doge_doc_standard='doxygen'\<CR>
  \<C-d>

Expect python (generated comment with @param and @return tags):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []) -> Sequence[T]:
    """!
    @brief [TODO:description]

    @param p1 [TODO:description]
    @param p2 [TODO:description]
    @param p3 [TODO:description]

    @return [TODO:description]
    """
    pass

# ==============================================================================
# Read out the exceptions in the function body
# ==============================================================================
Given python (function with exceptions being raised in the body):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []) -> Sequence[T]:
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass

Do (trigger doge):
  :let b:doge_doc_standard='doxygen'\<CR>
  \<C-d>

Expect python (generated comment with @param and @throws tags):
  def myFunc(p1, p2: Callable[[int], None], p3: Callable[[int, Exception], None] = []) -> Sequence[T]:
    """!
    @brief [TODO:description]

    @param p1 [TODO:description]
    @param p2 [TODO:description]
    @param p3 [TODO:description]

    @return [TODO:description]

    @throws [TODO:name] [TODO:description]
    @throws Exception [TODO:description]
    """
    try:
      foo = ValueError()
      raise foo
      raise Exception()
    except Exception as error:
      pass
