Do (configure settings):
  :let g:doge_doxygen_settings = {'char': '\'}\<CR>

# ==============================================================================
# C-functions and doc standards
# ==============================================================================
Given c (c function):
  int add(int x, int y);

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_javadoc'\<CR>
  \<C-d>

Expect c (generated comment):
  /**
   * \brief [TODO:summary]
   *
   * \param[[TODO:direction]] x [TODO:description]
   * \param[[TODO:direction]] y [TODO:description]
   * \return [TODO:description]
   */
  int add(int x, int y);

Given c (function definition with parameters with return type):
  int add(int x, int y) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_cpp_comment_exclamation'\<CR>
  \<C-d>

Expect c (generated comment):
  //!
  //! \brief [TODO:summary]
  //!
  //! \param[[TODO:direction]] x [TODO:description]
  //! \param[[TODO:direction]] y [TODO:description]
  //! \return [TODO:description]
  //!
  int add(int x, int y) {}

Given c (function definition with parameters with return type):
  int add(int x, int y) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_cpp_comment_slash_banner'\<CR>
  \<C-d>

Expect c (generated comment):
  ////////////////////////////////////////////////////////////////////////////////
  /// \brief [TODO:summary]
  ///
  /// \param[[TODO:direction]] x [TODO:description]
  /// \param[[TODO:direction]] y [TODO:description]
  /// \return [TODO:description]
  ////////////////////////////////////////////////////////////////////////////////
  int add(int x, int y) {}

Given c (function definition with parameters with return type):
  int add(int x, int y) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_cpp_comment_slash'\<CR>
  \<C-d>

Expect c (generated comment):
  ///
  /// \brief [TODO:summary]
  ///
  /// \param[[TODO:direction]] x [TODO:description]
  /// \param[[TODO:direction]] y [TODO:description]
  /// \return [TODO:description]
  ///
  int add(int x, int y) {}

Given c (function definition with parameters with return type):
  int add(int x, int y) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_javadoc_banner'\<CR>
  \<C-d>

Expect c (generated comment):
  /*******************************************************************************
   * \brief [TODO:summary]
   *
   * \param[[TODO:direction]] x [TODO:description]
   * \param[[TODO:direction]] y [TODO:description]
   * \return [TODO:description]
   ******************************************************************************/
  int add(int x, int y) {}

Given c (function definition with parameters with return type):
  int add(int x, int y) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_javadoc_no_asterisk'\<CR>
  \<C-d>

Expect c (generated comment):
  /**
  \brief [TODO:summary]

  \param[[TODO:direction]] x [TODO:description]
  \param[[TODO:direction]] y [TODO:description]
  \return [TODO:description]
  */
  int add(int x, int y) {}

Given c (function definition with parameters with return type):
  int add(int x, int y) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_qt_no_asterisk'\<CR>
  \<C-d>

Expect c (generated comment):
  /*!
  \brief [TODO:summary]

  \param[[TODO:direction]] x [TODO:description]
  \param[[TODO:direction]] y [TODO:description]
  \return [TODO:description]
  */
  int add(int x, int y) {}

Given c (function definition with parameters with return type):
  int add(int x, int y) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_qt'\<CR>
  \<C-d>

Expect c (generated comment):
  /*!
   * \brief [TODO:summary]
   *
   * \param[[TODO:direction]] x [TODO:description]
   * \param[[TODO:direction]] y [TODO:description]
   * \return [TODO:description]
   */
  int add(int x, int y) {}

# ==============================================================================
# C++ functions and doc standards.
# ==============================================================================
Given cpp (cpp function):
  template<class F, class... Args>
  auto Person::getPersonType (const Builder& builder) -> PersonType
  {
      return _person_type;
  }

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_javadoc'\<CR>
  \<C-d>

Expect cpp (generated comment):
  /**
   * \brief [TODO:summary]
   *
   * \tparam F [TODO:description]
   * \tparam Args [TODO:description]
   * \param[[TODO:direction]] builder [TODO:description]
   * \return [TODO:description]
   */
  template<class F, class... Args>
  auto Person::getPersonType (const Builder& builder) -> PersonType
  {
      return _person_type;
  }

Given cpp (function without parameters with return type):
  int myFunc(/* inline comment */) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_cpp_comment_exclamation'\<CR>
  \<C-d>

Expect cpp (generated comment):
  //!
  //! \brief [TODO:summary]
  //!
  //! \return [TODO:description]
  //!
  int myFunc(/* inline comment */) {}

Given cpp (function without parameters with return type):
  int myFunc(/* inline comment */) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_cpp_comment_slash_banner'\<CR>
  \<C-d>

Expect cpp (generated comment):
  ////////////////////////////////////////////////////////////////////////////////
  /// \brief [TODO:summary]
  ///
  /// \return [TODO:description]
  ////////////////////////////////////////////////////////////////////////////////
  int myFunc(/* inline comment */) {}

Given cpp (function without parameters with return type):
  int myFunc(/* inline comment */) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_cpp_comment_slash'\<CR>
  \<C-d>

Expect cpp (generated comment):
  ///
  /// \brief [TODO:summary]
  ///
  /// \return [TODO:description]
  ///
  int myFunc(/* inline comment */) {}

Given cpp (function without parameters with return type):
  int myFunc(/* inline comment */) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_javadoc_banner'\<CR>
  \<C-d>

Expect cpp (generated comment):
  /*******************************************************************************
   * \brief [TODO:summary]
   *
   * \return [TODO:description]
   ******************************************************************************/
  int myFunc(/* inline comment */) {}

Given cpp (function without parameters with return type):
  int myFunc(/* inline comment */) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_javadoc_no_asterisk'\<CR>
  \<C-d>

Expect cpp (generated comment):
  /**
  \brief [TODO:summary]

  \return [TODO:description]
  */
  int myFunc(/* inline comment */) {}

Given cpp (function without parameters with return type):
  int myFunc(/* inline comment */) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_qt_no_asterisk'\<CR>
  \<C-d>

Expect cpp (generated comment):
  /*!
  \brief [TODO:summary]

  \return [TODO:description]
  */
  int myFunc(/* inline comment */) {}

Given cpp (function without parameters with return type):
  int myFunc(/* inline comment */) {}

Do (trigger doge):
  :let b:doge_doc_standard='doxygen_qt'\<CR>
  \<C-d>

Expect cpp (generated comment):
  /*!
   * \brief [TODO:summary]
   *
   * \return [TODO:description]
   */
  int myFunc(/* inline comment */) {}

# ------------

Do (restore settings):
  :let g:doge_doxygen_settings = {'char': '@'}\<CR>
